var documenterSearchIndex = {"docs":
[{"location":"man/get/#Obtaining-the-Space-Indices","page":"Get space indices","title":"Obtaining the Space Indices","text":"","category":"section"},{"location":"man/get/","page":"Get space indices","title":"Get space indices","text":"CurrentModule = SpaceIndices\nDocTestSetup = quote\n    using Dates\n    using SpaceIndices\nend","category":"page"},{"location":"man/get/","page":"Get space indices","title":"Get space indices","text":"After the initialization shown in Initialization of Space Indices, the user can obtain the space index value using the function:","category":"page"},{"location":"man/get/","page":"Get space indices","title":"Get space indices","text":"function get_space_index(::Val{:index}, jd::Number; kwargs...) -> Number\nfunction get_space_index(::Val{:index}, instant::DateTime; kwargs...) -> Number","category":"page"},{"location":"man/get/","page":"Get space indices","title":"Get space indices","text":"where index is the desired space index and jd is the Julian Day to obtain the information. The latter can also be specified using instant, which is a DateTime object.","category":"page"},{"location":"man/get/","page":"Get space indices","title":"Get space indices","text":"julia> init_space_indices()\n\njulia> get_space_index(Val(:F10adj), DateTime(2020, 6, 19))\n71.1\n\njulia> get_space_index(Val(:F10adj), 2.4590195e6)\n71.1","category":"page"},{"location":"man/get/","page":"Get space indices","title":"Get space indices","text":"The following space indices are currently supported:","category":"page"},{"location":"man/get/","page":"Get space indices","title":"Get space indices","text":"Space file Index Description Unit\nfluxtable.txt F10obs Observed F10.7 (10.7-cm solar flux) 10⁻²² W / (M² ⋅ Hz)\n F10adj Adjusted F10.7 (10.7-cm solar flux) 10⁻²² W / (M² ⋅ Hz)]","category":"page"},{"location":"man/initialization/#Initialization-of-Space-Indices","page":"Initialization","title":"Initialization of Space Indices","text":"","category":"section"},{"location":"man/initialization/","page":"Initialization","title":"Initialization","text":"CurrentModule = SpaceIndices\nDocTestSetup = quote\n    using SpaceIndices\nend","category":"page"},{"location":"man/initialization/","page":"Initialization","title":"Initialization","text":"The files of all the registered space indices can be automatically downloaded using:","category":"page"},{"location":"man/initialization/","page":"Initialization","title":"Initialization","text":"function init_space_indices(; kwargs...) -> Nothing","category":"page"},{"location":"man/initialization/","page":"Initialization","title":"Initialization","text":"If a file exists, the function checks if its expiry period has passes. If so, it downloads the file again.","category":"page"},{"location":"man/initialization/","page":"Initialization","title":"Initialization","text":"julia> init_space_indices()\n[ Info: Downloading the file 'fluxtable.txt' from 'ftp://ftp.seismo.nrcan.gc.ca/spaceweather/solar_flux/daily_flux_values/fluxtable.txt'...","category":"page"},{"location":"man/initialization/","page":"Initialization","title":"Initialization","text":"If the user does not want to download a set of space indices, they can pass them in the keyword blocklist to the function init_space_indices.","category":"page"},{"location":"man/initialization/","page":"Initialization","title":"Initialization","text":"julia> init_space_indices(; blocklist = [SpaceIndices.Fluxtable])","category":"page"},{"location":"man/initialization/","page":"Initialization","title":"Initialization","text":"If the user wants to download only one space index file, they can use the function:","category":"page"},{"location":"man/initialization/","page":"Initialization","title":"Initialization","text":"function init_space_index(::Type{T}; force_download::Bool = true) where T<:SpaceIndexFile -> Nothing","category":"page"},{"location":"man/initialization/","page":"Initialization","title":"Initialization","text":"where T must be the desired space index file structure name. In this case, the user can pass the keyword force_download. If it is true, the related files will be download regardless their timestamp.","category":"page"},{"location":"man/initialization/","page":"Initialization","title":"Initialization","text":"julia> init_space_index(SpaceIndices.Fluxtable; force_download = true)\n[ Info: Downloading the file 'fluxtable.txt' from 'ftp://ftp.seismo.nrcan.gc.ca/spaceweather/solar_flux/daily_flux_values/fluxtable.txt'...","category":"page"},{"location":"lib/library/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"lib/library/","page":"Library","title":"Library","text":"Documentation for SpaceIndices.jl.","category":"page"},{"location":"lib/library/","page":"Library","title":"Library","text":"Modules = [SpaceIndices]","category":"page"},{"location":"lib/library/#SpaceIndices.SpaceIndexFile","page":"Library","title":"SpaceIndices.SpaceIndexFile","text":"abstract type SpaceIndexFile\n\nAbstract type for all structures that represent space files.\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SpaceIndices.destroy_space_indices-Tuple{}","page":"Library","title":"SpaceIndices.destroy_space_indices","text":"destroy_space_indices()\n\nDestroy the object of all space indices that were initialized.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SpaceIndices.fetch_space_file-Union{Tuple{Type{T}}, Tuple{T}} where T<:SpaceIndexFile","page":"Library","title":"SpaceIndices.fetch_space_file","text":"fetch_space_file(::Type{T}; kwargs...) where T<:SpaceIndexFile -> String\n\nFetch the space file related to the space index T. This function returns the space index file path.\n\nKeywords\n\nforce_download::Bool: If true, the space file will be downloaded regardless of its   timestamp. (Default = false)\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SpaceIndices.get_expiry_period-Union{Tuple{Type{T}}, Tuple{T}} where T<:SpaceIndexFile","page":"Library","title":"SpaceIndices.get_expiry_period","text":"get_expiry_period(::Type{T}) where T<:SpaceIndexFile -> DatePeriod\n\nReturn the expiry period for the space index file T. The remote file will always be downloaded again if a time larger than this period has passed after the last download.\n\nIf this function is not defined for T, the default expiry period of 7 days is used.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SpaceIndices.get_filename","page":"Library","title":"SpaceIndices.get_filename","text":"get_filename(::Type{T}) where T<:SpaceIndexFile -> String\n\nReturn the filename for the space index file T.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SpaceIndices.get_space_index","page":"Library","title":"SpaceIndices.get_space_index","text":"get_space_index(::Val{:index}, jd::Number; kwargs...) -> Number\nget_space_index(::Val{:index}, instant::DateTime; kwargs...) -> Number\n\nGet the space index for the Julian day jd or instant, which can be an object of type DateTime. kwargs... can be used to pass additional configuration for the space index.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SpaceIndices.get_space_index-Tuple{Val{:F10adj}, Number}","page":"Library","title":"SpaceIndices.get_space_index","text":"get_space_index(::Val{:F10adj}, jd_utc::Number) -> Float64\n\nGet the adjusted F10.7 index (10.7-cm solar flux) [10⁻²² W/(M²⋅Hz)] for the Julian day jd_utc.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SpaceIndices.get_space_index-Tuple{Val{:F10obs}, Number}","page":"Library","title":"SpaceIndices.get_space_index","text":"get_space_index(::Val{:F10obs}, jd_utc::Number) -> Float64\n\nGet the observed F10.7 index (10.7-cm solar flux) [10⁻²² W/(M²⋅Hz)] for the Julian day jd_utc.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SpaceIndices.get_url","page":"Library","title":"SpaceIndices.get_url","text":"get_url(::Type{T}) where T<:SpaceIndexFile -> String\n\nReturn the URL to obtain the space index file T.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SpaceIndices.init_space_index-Union{Tuple{Type{T}}, Tuple{T}} where T<:SpaceIndexFile","page":"Library","title":"SpaceIndices.init_space_index","text":"init_space_index(::Type{T}; kwargs...) where T<:SpaceIndexFile\n\nInitialize the space index T.\n\nThis function will download the remote file associated to the space index T if it does not exist or if the redownload period has been passed. Aftward, it will parse the file and populate the object handler to be accesses by the function get_space_index.\n\nKeywords\n\nforce_download::Bool: If true, the space file will be downloaded regardless of its   timestamp. (Default = false)\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SpaceIndices.init_space_indices-Tuple{}","page":"Library","title":"SpaceIndices.init_space_indices","text":"init_space_indices(; blocklist::Vector = []) -> Nothing\n\nInitialize all the registered space indices.\n\nThis function will download the remote files associated to the space indices if they do not exist or if the redownload period has been passed. Aftward, it will parse the files and populate the object handlers to be accesses by the function get_space_index.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SpaceIndices.parse_space_file","page":"Library","title":"SpaceIndices.parse_space_file","text":"parse_space_file(::Type{T}, filepath::String) where T<:SpaceIndexFile -> T\n\nParse the space index file T using the file in filepath. It must return an object of type T with the parsed data.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SpaceIndices.@check_timespan-Tuple{Any, Any}","page":"Library","title":"SpaceIndices.@check_timespan","text":"@check_timespan(itp, jd)\n\nCheck if the interpolation itp contains the date jd within its nodes. If not, it thrown an ArgumentError exception.\n\n\n\n\n\n","category":"macro"},{"location":"lib/library/#SpaceIndices.@data_handler-Tuple{Any}","page":"Library","title":"SpaceIndices.@data_handler","text":"@data_handler(T)\n\nGet the variable with the optional data handler for space index file structure T.\n\n\n\n\n\n","category":"macro"},{"location":"lib/library/#SpaceIndices.@object-Tuple{Any}","page":"Library","title":"SpaceIndices.@object","text":"@object(T)\n\nGet the data handler for the space index file structure T.\n\n\n\n\n\n","category":"macro"},{"location":"lib/library/#SpaceIndices.@register-Tuple{Any}","page":"Library","title":"SpaceIndices.@register","text":"@register(T)\n\nRegister the the space index file structure T. This macro push the data into the global vector of space files and also creates the optinal data handler for the processed structure.\n\n\n\n\n\n","category":"macro"},{"location":"#SpaceIndices.jl","page":"Home","title":"SpaceIndices.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package allows to automatically fetch and parse space indices.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The files supported in this version are:","category":"page"},{"location":"","page":"Home","title":"Home","text":"File Expiry period Information\nfluxtable.txt 1 day It contains the F10.7 flux data (observed and adjusted).","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package can be installed using:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"SpaceIndices\")","category":"page"},{"location":"man/api/#SpaceIndices.jl-API","page":"API","title":"SpaceIndices.jl API","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"CurrentModule = SpaceIndices\nDocTestSetup = quote\n    using SpaceIndices\nend","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"This package defines an API to allow user to defin new space indices. We describe this API in the following.","category":"page"},{"location":"man/api/#Structure","page":"API","title":"Structure","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"Each space file must have a structure that has SpaceIndexFile as its super-type. This structure must contain all the required field to process and return the indices related with the ","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"struct MySpaceFile <: SpaceIndexFile\n    ...\nend","category":"page"},{"location":"man/api/#Required-API-Functions","page":"API","title":"Required API Functions","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"We must define the following functions for every space file structure creates as in the previous section.","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"get_url(::Type{T}) where T<:SpaceIndexFile -> String","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"This function must return a String with the space file URL. For example:","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"get_url(::Type{MySpaceFile}) = \"https://url.for.my/space.file.txt\"","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"get_filename(::Type{T}) where T<:SpaceIndexFile -> String","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"This function must return a String with the filename for the space file. The system will used this information to save the data in the package scratch space. For example:","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"get_filename(::Type{MySpaceFile}) = \"my_space_file.txt\"","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"parse_space_file(::Type{T}, filepath::String) where T<:SpaceIndexFile -> T","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"This function must parse the space index file T using the file in filepath and return an structure of type T with the parsed data. For example,","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"function parse_space_file(::Type{MySpaceFile}, filepath::String)\n    open(filepath, \"r\") do f\n        ...\n        return MySpaceFile(index_1, index_2, index_3)\n    end\nend","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"Finally, the new space file must also implement a set of functions with the following signature:","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"get_space_index(::Val{:index}, jd::Number; kwargs...) -> Number","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"where the space index for the Julian day jd will be returned.","category":"page"},{"location":"man/api/#Optional-API-Function","page":"API","title":"Optional API Function","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"get_expiry_period(::Type{T}) where T<:SpaceIndexFile -> DatePeriod","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"This function must return the expiry period for the space index file T. The remote file will always be downloaded again if a time larger than this period has passed after the last download. If this function is not defined, it returns Day(7) by default.","category":"page"},{"location":"man/api/#Example:-Leap-Seconds","page":"API","title":"Example: Leap Seconds","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"We will use the API to define a new space index that has the GPS leap seconds. The file has a CSV-like format but the values are separated by ;. It has two columns. The first contains the Julian days in which the leap seconds were modified to the values in the second column:","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"Julian Day;Leap Seconds\n2441499.500000;11.0\n2441683.500000;12.0\n2442048.500000;13.0\n2442413.500000;14.0\n...","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"First, we need to load the required packages to process the information in the space index file:","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"julia> using DelimitedFiles, Dates","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"Now, we need to create its structure:","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"struct LeapSeconds <: SpaceIndexFile\n    jd::Vector{Float64}\n    leap_seconds::Vector{Float64}\nend","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"where jd contains the Julian days in which the leap seconds were modified to the values in leap_seconds.","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"We also need to overload the API functions:","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"SpaceIndices.get_url(::Type{LeapSeconds}) = \"https://ronanarraes.com/space-indices/leap_seconds.csv\"\nSpaceIndices.get_filename(::Type{LeapSeconds}) = \"leap_seconds.csv\"\nSpaceIndices.get_expiry_period(::Type{LeapSeconds}) = Day(365)\n\nfunction SpaceIndices.parse_space_file(::Type{LeapSeconds}, filepath::String)\n    raw_data, ~ = readdlm(filepath, ';'; header = true)\n    return LeapSeconds(raw_data[:, 1], raw_data[:, 2])\nend","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"We also need to populate the get_space_index with the supported index in this file:","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"function SpaceIndices.get_space_index(::Val{:LeapSeconds}, jd_utc::Number)\n    obj = SpaceIndices.@object(LeapSeconds)\n    id = findfirst(>=(jd_utc), obj.jd)\n\n    if isnothing(id)\n        id = length(obj.jd)\n    end\n\n    return obj.leap_seconds[id]\nend","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"Finally, we need to register the new space index file:","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"SpaceIndices.@register LeapSeconds","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"We can now use the SpaceIndices.jl system to fetch the information:","category":"page"},{"location":"man/api/","page":"API","title":"API","text":"julia> init_space_indices()\n[ Info: Downloading the file 'fluxtable.txt' from 'ftp://ftp.seismo.nrcan.gc.ca/spaceweather/solar_flux/daily_flux_values/fluxtable.txt'...\n[ Info: Downloading the file 'leap_seconds.csv' from 'https://ronanarraes.com/space-indices/leap_seconds.csv'...\n\njulia> get_space_index(Val(:LeapSeconds), now())\n37.0","category":"page"},{"location":"man/quick_start/#Quick-Start","page":"Quick start","title":"Quick Start","text":"","category":"section"},{"location":"man/quick_start/","page":"Quick start","title":"Quick start","text":"CurrentModule = SpaceIndices\nDocTestSetup = quote\n    using SpaceIndices\nend","category":"page"},{"location":"man/quick_start/","page":"Quick start","title":"Quick start","text":"This quick tutorial will show how to use SpaceIndicies.jl to obtain the F10.7 index at 2020-06-19.","category":"page"},{"location":"man/quick_start/","page":"Quick start","title":"Quick start","text":"First, we need to initialize all the space indices:","category":"page"},{"location":"man/quick_start/","page":"Quick start","title":"Quick start","text":"julia> init_space_indices()\n[ Info: Downloading the file 'fluxtable.txt' from 'ftp://ftp.seismo.nrcan.gc.ca/spaceweather/solar_flux/daily_flux_values/fluxtable.txt'...","category":"page"},{"location":"man/quick_start/","page":"Quick start","title":"Quick start","text":"Afterward, we can obtain the desired space index using:","category":"page"},{"location":"man/quick_start/","page":"Quick start","title":"Quick start","text":"julia> get_space_index(Val(:F10adj), DateTime(2020, 6, 19))\n71.1","category":"page"}]
}
